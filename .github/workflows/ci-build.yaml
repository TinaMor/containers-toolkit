name: CI Build

on:
  workflow_dispatch:
    inputs:
      runner:
        description: "Windows runner image"
        required: false
        default: windows-2022
        type: choice
        options:
          - windows-latest
          - windows-2022
          - windows-2019

  pull_request:
    branches: ["main", "releases/**"]
    paths-ignore:
      - "docs/**"
      - "*.md"
      - en-US/**"


env:
  MODULE_DIR: .\Containers-Toolkit
  BUILD_SCRIPTS_DIR: .\build\scripts
  PESTER_RESULTS_DIR: .\TestResults
  MODULE_ARTIFACT: CTK.Module.Scripts
  REPO_ARTIFACT: CTK.Scripts

jobs:
  lint:
    runs-on: ${{ github.event.inputs.RUNNER || 'windows-2022' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # TODO: Fix cache not working
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v3
        with:
          path: "C:\\program files\\powershell\\7\\Modules"
          key: ${{ runner.os }}-CTK

      - name: Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          $ModuleName = 'PSScriptAnalyzer'
          if (-not (Get-Module -ListAvailable -Name $ModuleName)) {
            Write-Host "Modules to install: '$ModuleName'"
            Install-Module $ModuleName -ErrorAction Stop -AllowClobber -SkipPublisherCheck -Force
          }

      - name: Run code analysis with PSScriptAnalyzer
        shell: pwsh
        run: |
          ${{ env.BUILD_SCRIPTS_DIR}}\script-analyzer.ps1

      - name: Publish PSScriptAnalyzer results file
        uses: actions/upload-artifact@v4
        with:
          name: PSScriptAnalyzer.Results
          path: psscriptanalysis.xml
          if-no-files-found: error
          overwrite: true

  pester:
    # TODO: Add Windows ARM64 support
    runs-on: ${{ github.event.inputs.RUNNER || 'windows-2022' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # TODO: Fix cache not working
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v3
        with:
          path: "C:\\program files\\powershell\\7\\Modules"
          key: ${{ runner.os }}-CTK

      - name: Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Get-Command "Get-HNSNetwork"

          Set-PSRepository PSGallery -InstallationPolicy Trusted
          $requiredModules = @('Pester', 'ThreadJob', 'HNS')
          $missingModules = $requiredModules | Where-Object { -not (Get-Module -ListAvailable -Name $_) }

          if ($missingModules) {
            Write-Host "Modules to install: $($missingModules -join ', ')"
            Install-Module $missingModules -ErrorAction Stop -AllowClobber -SkipPublisherCheck -Force
          }

      - name: Run Pester tests
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Continue'
          ${{ env.BUILD_SCRIPTS_DIR}}\run-tests.ps1

      - name: Publish Pester results
        uses: actions/upload-artifact@v4
        with:
          name: CTK.Pester.Results
          path: ${{ env.PESTER_RESULTS_DIR }}\Test-Results.xml
          if-no-files-found: error
          overwrite: true

      - name: Publish code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: CTK.Coverage.Summary
          path: ${{ env.PESTER_RESULTS_DIR }}\coverage.xml
          if-no-files-found: error
          overwrite: true

      # FIXME: Error: Container action is only supported on Linux
      # - name: Publish code coverage results
      #   uses: irongut/CodeCoverageSummary@v1.3.0
      #   with:
      #     filename: ${{ env.PESTER_RESULTS_DIR }}\coverage.xml
      #     fail_below_min: true
      #     format: markdown
      #     output: both

      # - name: Publish module scripts to GitHub Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ env.MODULE_ARTIFACT }}
      #     path: ${{ env.MODULE_DIR }}
      #     if-no-files-found: error
      #     overwrite: true

      # - name: Publish entire dir to GitHub Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ env.REPO_ARTIFACT }}
      #     path: .
      #     if-no-files-found: error
      #     overwrite: true

    # # The always() function configures the job to continue processing even if there are test failures
    # if: ${{ always() }}

  publish-coverage-results:
    needs: pester
    runs-on: ubuntu-latest
    steps:
      - name: Download coverage results artifact
        uses: actions/download-artifact@v4
        with:
          name: CTK.Coverage.Summary

      - name: View the coverage results
        shell: bash
        run: |
          cat ./coverage.xml

      - name: Publish code coverage results
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          # fail_below_min: true
          # format: markdown
          # output: both
